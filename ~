from lexer import Lexer
from parser import Parser



class Interpreter():
    def __init__(self,trees):
        self.trees=trees
        print(self.trees)
    def eval_expression(self,tree):
        nodetype=tree[0]
        if nodetype=='NUM':
            print(nodetype)
            return int(tree[1])
        elif nodetype=="binop":
            left_child=tree[1]
            operator=tree[2]
            right_child=tree[3] 
            left_val=self.eval_expression(left_child)
            right_val=self.eval_expression(right_child)
            if operator=='PLUS':
                return left_val +right_val
            elif operator=='MINUS':
                return left_val-right_val
            elif operator=='MULT':
                return left_val*right_val
            elif operator=='DIV':
                return left_val/right_val

    def interpret(self):
        nodetype=self.trees[0]
        if nodetype=='binop':
            return self.eval_expression(self.trees)
            

            

            
            



    

lexer=Lexer()
lexer.build()
parser=Parser()
trees=parser.parse_text('2+2')
Interpret=Interpreter(trees)
(Interpret.interpret())
